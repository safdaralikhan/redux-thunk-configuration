
REDUX THHUNK

first install redux 
then install react-redux
then redux-thunk

create redux structure

store.js code
import { createStore, applyMiddleware } from 'redux'
import thunk from 'redux-thunk'
import rootReducer from './reducers/RootReducer'

const store = createStore(rootReducer, applyMiddleware(thunk))

export default store

ACTION.JS
//Action Types
export const SEARCHDATA = "SEARCHDATA";


//Action Creator
export const updateForm = (data) => ({

    // console.log("data",data)
    type: SEARCHDATA,
    payload:data
});

Reducer.js
import { SEARCHDATA } from '../actions/ActionFunction';



const counterReducer = (state = { searchdata: {} }, action) => {
    switch (action.type) {
        case SEARCHDATA:

            console.log("action.payload",action.payload)
            return { ...state, searchdata: action.payload };
    
        default:
            return { ...state };
    }
};



 export default counterReducer


ROOTREDUCER.JS

import counterReducer from './CountReducer';
import {combineReducers} from 'redux';

const rootReducer = combineReducers({
    counter: counterReducer
});

export default rootReducer;


TO GET DATA FROM REDUX USESELECTOR :
import { useSelector } from 'react-redux'; 
  const counter = useSelector(state => state.counter)
  
  
  
  HOW TO SEND DATA INTO REDUX
import { useDispatch } from "react-redux";
    const dispatch = useDispatch()
   dispatch(Timein())
HOW TO GET DATA FROM REDUX
import { useSelector, } from 'react-redux';
const store = useSelector(store => store)


CALL API IN ACTION JS

export const TIMEIN = "TIMEIN";
const Timein=(data)=>{
    return(dispatch)=>{
        const Token = localStorage.getItem("RiderToken")

        var requestOptions = {
            method: 'GET',
            headers: {
                Authorization: "Bearer " + Token
            }
        };

        fetch(`${baseUrl.baseUrl}webapi/ridertimingDetails`, requestOptions)
        .then(response => response.json())
        .then(result => {
       

            if (result.length > 0) {
                console.log("donedata",result)
              

                    console.log("response",result);
                dispatch({type:'TIMEIN',  payload:result})
            }  
        })
        .catch(error => {
            console.log(error);
        });
             
      }
     
}

export { Timein}

ACTION JS 

const TimeIn = (state = { timein: {} }, action) => {
    switch (action.type) {
        case TIMEIN:
            return { ...state, timein: action.payload }; 
       
        default:
            return { ...state };
    }
};

export default TimeIn;

  
ACTIVE NAVLINK WITH PATHNAME

import uselocation
 const location = useLocation();
from location destructure pathname
const { pathname } = location;

make state to set path in state
const [active, setActive] = useState("");

in useeffect setactive when ever header render pathname will change and make condition on active.
setActive(pathname)

className={active == "/RiderReservation" ? "menu--link  navActive":"menu--link "}



  
  
  
  
  
  
  
